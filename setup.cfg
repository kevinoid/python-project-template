# Setuputils package metadata file
# https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = python-project-template
# Human "friendly" project name for sphinx and other non-setup uses
friendly_name = Python Project Template
version = attr: packagename.__version__
description = Short description of this package and its purpose.
long_description = file: README.rst
# Note: license is only needed for deviations/exceptions to License classifier
# https://packaging.python.org/guides/distributing-packages-using-setuptools/?highlight=keywords#license
# Is also printed by `./setup.py --license`.  Match classifier where possible.
license = MIT License
license_files = LICENSE.txt
author = Kevin Locke
author_email = kevin@kevinlocke.name
# Copyright statement for sphinx and other non-setup uses
copyright = Copyright 2019-2022 Kevin Locke <kevin@kevinlocke.name>
url = https://github.com/kevinoid/python-project-template
# Project URLs for specific purposes
# https://packaging.python.org/guides/distributing-packages-using-setuptools/?highlight=keywords#project-urls
project_urls =
    Documentation = https://python-project-template.readthedocs.io/
    Source = https://github.com/kevinoid/python-project-template
    Tracker = https://github.com/kevinoid/python-project-template/issues
# From PyPI classifiers list: https://pypi.org/classifiers/
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    Topic :: Software Development
# (Optional) Additional keywords used to assist searching.
keywords = sample setuptools development

[options]
zip_safe = True
package_dir =
    = src
# Use packages for directories, py_modules for single-file modules
# See https://packaging.python.org/guides/distributing-packages-using-setuptools/#packages
# py_modules = packagename
packages = find:
python_requires = >=3.7
# Note: install_requires and tests_require from requirements/*.in by setup.py

# Define entry points for automatic executable creation
# https://setuptools.pypa.io/en/latest/userguide/quickstart.html#entry-points-and-automatic-script-creation
[options.entry_points]
console_scripts =
    packagename = packagename.cli:main

# Optional dependencies
# https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#optional-dependencies
[options.extras_require]
argcomplete =
    argcomplete ~= 2.0

[options.packages.find]
exclude =
    tests
where = src

[bdist_wheel]
universal = true

[aliases]
test = pytest

# Additional data files to include in the package
# https://setuptools.pypa.io/en/latest/userguide/datafiles.html
#
# Note: If files should also be included in source distributions, also add them
# to MANIFEST.in.  See https://stackoverflow.com/a/14159430
#
# If all files included in the sdist should be included in the bdist, consider
# setting include_package_data = True in [options]
[options.package_data]
packagename =
    # Mark as containing inline type information
    # https://peps.python.org/pep-0561/#packaging-type-information
    py.typed

# TODO: Move to pyproject.toml if/when supported
# https://github.com/PyCQA/flake8/issues/234#issuecomment-812800722
[flake8]
exclude =
    *.egg,
    .eggs,
    .git,
    .tox,
    .venv,
    .vulture,
    __pycache__,
    dist,
ignore =
    # Line break before binary operator
    W503,
max-line-length = 80
per-file-ignores =
    # Don't require doc comments for test members
    test_*.py:D101,D102,D103,D105,D107
# Configure reST directives/roles for flake8-rst-docstrings
# https://github.com/peterjc/flake8-rst-docstrings/pull/16
# Note: Can get directives/roles from sphinx based on code from
# https://github.com/peterjc/flake8-rst-docstrings/issues/7#issuecomment-438788459
# Note: Modified to match both default domain and explicit py domain
# https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html
#
# from sphinx.application import Sphinx
# s = Sphinx('.', None, '/tmp', '.', 'html')
# domains = s.registry.domains.values()
# print('rst-directives =\n    '
#       + ',\n    '.join(sorted({dr + ', py:' + dr for d in domains for dr in d.directives}))
#       + ',\nrst-roles =\n    '
#       + ',\n    '.join(sorted({r + ', py:' + r for d in domains for r in d.roles})))
rst-directives =
    alias, py:alias,
    attribute, py:attribute,
    class, py:class,
    classmethod, py:classmethod,
    cmdoption, py:cmdoption,
    concept, py:concept,
    currentmodule, py:currentmodule,
    data, py:data,
    decorator, py:decorator,
    decoratormethod, py:decoratormethod,
    directive, py:directive,
    directive:option, py:directive:option,
    enum, py:enum,
    enum-class, py:enum-class,
    enum-struct, py:enum-struct,
    enumerator, py:enumerator,
    envvar, py:envvar,
    exception, py:exception,
    function, py:function,
    glossary, py:glossary,
    macro, py:macro,
    member, py:member,
    method, py:method,
    module, py:module,
    namespace, py:namespace,
    namespace-pop, py:namespace-pop,
    namespace-push, py:namespace-push,
    option, py:option,
    productionlist, py:productionlist,
    program, py:program,
    property, py:property,
    role, py:role,
    staticmethod, py:staticmethod,
    struct, py:struct,
    type, py:type,
    union, py:union,
    var, py:var,
rst-roles =
    any, py:any,
    attr, py:attr,
    class, py:class,
    concept, py:concept,
    const, py:const,
    data, py:data,
    dir, py:dir,
    doc, py:doc,
    enum, py:enum,
    enumerator, py:enumerator,
    envvar, py:envvar,
    exc, py:exc,
    expr, py:expr,
    func, py:func,
    keyword, py:keyword,
    macro, py:macro,
    member, py:member,
    meth, py:meth,
    mod, py:mod,
    numref, py:numref,
    obj, py:obj,
    option, py:option,
    ref, py:ref,
    role, py:role,
    struct, py:struct,
    term, py:term,
    texpr, py:texpr,
    token, py:token,
    type, py:type,
    union, py:union,
    var, py:var

# TODO: Move to pyproject.toml if/when supported
# https://github.com/PyCQA/pycodestyle/issues/813
[pycodestyle]
max_line_length = 80

# vim: set ft=dosini :
